version: "3"
services:
  api:
    build:
      context: ./api
    image: api
    ports:
      - "9000:9000"
    volumes:
      - ./api:/api:delegated
    depends_on:
      - postgres
    environment:
      - NODE_ENV=development
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=database
      - POSTGRES_PORT=5432
      - API_PORT=9000
    command: ["yarn", "start:dev:setup"]
  api_integration_test:
    build:
      context: ./api
    image: api
    ports:
      - "9001:9001"
    volumes:
      - ./api:/api:delegated
    depends_on:
      - postgres
    environment:
      - NODE_ENV=test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=database_test
      - POSTGRES_PORT=5432
      - API_PORT=9001
    command: ["yarn", "test:integration:dev:setup"]
  postgres:
    image: postgres:11.6
    ports:
      - "5432:5432"
    volumes:
      - ./scripts/pg-init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_MULTIPLE_DATABASES=database,database_test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  # proxy:
  #   image: jwilder/nginx-proxy
  #   environment:
  #     - DEFAULT_HOST=synapse.codes
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /var/run/docker.sock:/tmp/docker.sock:ro
  #     - ../synapse.codes.key:/etc/nginx/certs/synapse.codes.key:ro
  #     - ../synapse.codes.crt:/etc/nginx/certs/synapse.codes.crt:ro
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.frontend
  #   container_name: frontend
  #   image: "frontend"
  #   volumes:
  #     - ./frontend:/frontend
  #   # depends_on:
  #   #   - api
  #   environment:
  #     PORT: 3000
  #   command: ["yarn", "start"]
